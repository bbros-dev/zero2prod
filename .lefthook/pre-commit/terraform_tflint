#!/usr/bin/env bash
# SPDX-FileCopyrightText: (c) 2017 Anton Babenko
# SPDX-FileCopyrightText: (c) 2020 Begley Brothers Inc. <BegleyBrothers@gmail.com>
# SPDX-License-Identifier: Apache-2.0 OR MIT

if [[ ${DEBUG-} =~ ^1|y|yes|true$ ]]; then
  # Take stdout and stderr from this script. 
  # Redirect to the logger command, which sends to syslog.
  # Adding `-s` echoes to stderr - however profile is run by non-interactive
  # terminals and any noise from them breaks sftp and scp.
  # See OpenSSH FAQ note below.
  # So when debugging we actually want to log lots but be 'silent' wrt to the
  # terminal.
  exec 1> >(logger -t $(basename $0)) 2>&1
  set -o xtrace       # Trace the execution of the script (debug)
fi
set -o errexit
set -o pipefail

main() {
  initialize_
  # Turn off exit-on-error because...
  set +o errexit
  # ... the `ls` command errors when the changeset is only deleted files.
  staged_files=($(git diff-index --cached --name-only HEAD | xargs ls -1 2>/dev/null))
  set -o errexit
  parse_cmdline_ "$@ ${staged_files[@]}"
  tflint_
}

initialize_() {
  # get directory containing this script
  local dir
  local source
  source="${BASH_SOURCE[0]}"
  while [[ -L $source ]]; do # resolve $source until the file is no longer a symlink
    dir="$(cd -P "$(dirname "$source")" > /dev/null && pwd)"
    source="$(readlink "$source")"
    # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $source != /* ]] && source="$dir/$source"
  done
  _SCRIPT_DIR="$(dirname "$source")"

  # source getopt function
  # shellcheck source=lib_getopt
  . "$_SCRIPT_DIR/../scripts/lib_getopt"
}

parse_cmdline_() {
  declare argv
  argv=$(getopt -o a: --long args: -- "$@") || return
  eval "set -- $argv"

  for argv; do
    case $argv in
      -a | --args)
        shift
        expanded_arg="${1//__GIT_WORKING_DIR__/$PWD}"
        ARGS+=("$expanded_arg")
        shift
        ;;
      --)
        shift
        FILES=("$@")
        break
        ;;
    esac
  done

}

tflint_() {
  local index=0
  for file_with_path in "${FILES[@]}"; do
    file_with_path="${file_with_path// /__REPLACED__SPACE__}"

    paths[index]=$(dirname "$file_with_path")

    ((index += 1))
  done

  for path_uniq in $(echo "${paths[*]}" | tr ' ' '\n' | sort -u); do
    path_uniq="${path_uniq//__REPLACED__SPACE__/ }"
    if [ -d "$path_uniq" ]
    then
      pushd "$path_uniq" > /dev/null
        tflint "${ARGS[@]}"
      popd > /dev/null
    fi
  done
}

# global arrays
declare -a ARGS
declare -a FILES

[[ ${BASH_SOURCE[0]} != "$0" ]] || main "$@"
